[gd_scene load_steps=7 format=2]

[ext_resource path="res://Assets/barrel.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

onready var animation: AnimationPlayer = $AnimationPlayer

const SPEED: int = 50
const GRAVITY: int = 200
const UP_VECTOR: Vector2 = Vector2(0,-1) #indicator, how the up direction is defined 

var velocity: Vector2 = Vector2()
var direction: int = 1 # 1 = right, -1 left

var is_falling_ladder: bool = false # indicator, if the barrel is falling down a ladder


func _process(delta):
	
	check_destroy()
	is_falling_ladder = check_ladder_falling()

	if is_on_floor() and not is_falling_ladder:
		velocity.y = 0
		
		if direction == 1:
			animation.play(\"rolling\")
		else:
			animation.play_backwards(\"rolling\")

		if floor(position.x) == 216:
			direction = -1
		if floor(position.x) == 8:
			direction = 1
			
		velocity.x = direction * SPEED
	else:
		velocity.x = 0
		velocity.y += GRAVITY * delta # make fall faster the longer the fall

	move_and_slide_with_snap(velocity, Vector2(0,1), UP_VECTOR)
	
func check_ladder_falling() -> bool:
	# check if the barrel is moving over the top of a ladder and
	# decide randomly, if it falls down this ladder.
	#
	# returns bool: true, if the barrel is falling down a ladder, false if not
	if not is_falling_ladder:
		if check_for_ladder():
			randomize()
			var random_val: int = randi() % 3 #33% chance of falling

			if(random_val == 0):
				animation.play(\"ladder_falling\")
				position.y += 10
				direction = -1 * direction
				return true

		return false

	else:
		if is_on_floor() and not check_for_ladder():
			return false
		else:
			return true
	
	
func check_destroy() -> void:
	# destroy the barrel if it reached the lower left corner
	# or collides with a hammer or fire elemental spawner
	if floor(position.x) == 8 and position.y > 280:
		 queue_free()
		
	#detroy the barrel if it hits the elemental spawner
	if get_slide_count() > 0:
		for i in range(get_slide_count()):
			if get_slide_collision(i).collider != null:
				if \"ElementalSpawner\" in get_slide_collision(i).collider.name:
					queue_free()
	
	# destroy the barrel, if it hits a hammer. Raise score.
	for i in $Hitbox.get_overlapping_areas():
		if i.name.begins_with(\"Hammer\"):
			get_parent().score(100, position)
			queue_free()


		
		
func check_for_ladder() -> bool:
	# check if the barrel is currently positioned over a ladder.
	#
	# returns bool: true, if the barrel is over a ladder, false if not
	$RayCast2D.force_raycast_update()
	var collider = $RayCast2D.get_collider()
	if collider != null:
		return collider.name.begins_with(\"Ladder\")
	return false
"

[sub_resource type="Animation" id=2]
resource_name = "ladder_falling"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 5, 6 ]
}

[sub_resource type="Animation" id=3]
resource_name = "rolling"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3 ]
}

[sub_resource type="CircleShape2D" id=4]

[sub_resource type="RectangleShape2D" id=5]

[node name="Barrel" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0, -5 )
texture = ExtResource( 1 )
vframes = 2
hframes = 5
frame = 3

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/ladder_falling = SubResource( 2 )
anims/rolling = SubResource( 3 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, -5 )
scale = Vector2( 0.6, 0.5 )
shape = SubResource( 4 )

[node name="RayCast2D" type="RayCast2D" parent="."]
position = Vector2( 0, 3 )
scale = Vector2( 0.1, 0.05 )
collide_with_areas = true
collide_with_bodies = false

[node name="Hitbox" type="Area2D" parent="."]
scale = Vector2( 0.6, 0.6 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
position = Vector2( 0, -8.33333 )
scale = Vector2( 1, 0.8 )
shape = SubResource( 5 )
