[gd_scene load_steps=5 format=2]

[ext_resource path="res://Assets/fireelemental.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

onready var animation = $AnimationPlayer
export var direction: int = 1 # 1 = right, -1 left


const SPEED = 10
const GRAVITY = 200
const UP_VECTOR = Vector2(0,-1) #indicator, how the up direction is defined 

var velocity = Vector2()
var climbing_dir = 1 # 1 down, -1 up

var is_climbing_ladder = false
var last_ladder_id = 0
var last_body_id = 0

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if  direction == 1:
		$Sprite.flip_h = false
	else:
		$Sprite.flip_h = true
	
	animation.play(\"moving\")
	
	
	if is_on_floor() and not is_climbing_ladder:
		velocity.y = 0
		
		if floor(position.x) == 216:
			direction = -1
			last_ladder_id = 0
		if floor(position.x) == 8:
			direction = 1
			last_ladder_id = 0
			
		velocity.x = direction * SPEED

	else:
		velocity.x = 0
		if not is_climbing_ladder:
			velocity.y += GRAVITY * delta # make fall faster the longer the fall
		else:
			velocity.y = 0

	handle_ladder_decision()
	handle_climb_platform()
	
	move_and_slide_with_snap(velocity, Vector2(0,1), UP_VECTOR)
	
	handle_collision()


func handle_ladder_decision():

	if not is_climbing_ladder:
		
		#check for ladder climbing up
		$RayCastUp.force_raycast_update()
		var collider = $RayCastUp.get_collider()

		if collider != null \\
			and collider.name.begins_with(\"Ladder\") \\
			and last_ladder_id != collider.get_instance_id():
				
			last_ladder_id = collider.get_instance_id()
			randomize()
			var random_val = randi() % 3 

			if random_val == 0:
				return
			elif random_val == 1:
				direction = direction * -1
			else:
				position.y -= 2 # need to get off ground first
				climbing_dir = -1
				is_climbing_ladder = true
				$RayCastUp.collide_with_areas = false #during climbing we only need to check for platform (body)
		
		# check for ladder climbing down
		$RayCastDown.force_raycast_update()
		collider = $RayCastDown.get_collider()

		if collider != null \\
			and collider.name.begins_with(\"Ladder\") \\
			and last_ladder_id != collider.get_instance_id():	

				randomize()
				var random_val = randi() % 2 #33% chance of falling
				random_val = 1
				if random_val == 1:
					position.y += 4
					climbing_dir = 1
					is_climbing_ladder = true
					$RayCastDown.collide_with_bodies = true
					$RayCastDown.collide_with_areas = false #during climbing we only need to check for platform (body)
					

	else:

		velocity.y = climbing_dir * SPEED
		var raycast = null
		if climbing_dir == 1:
			raycast = $RayCastDown
		else:
			raycast = $RayCastUp

		raycast.force_raycast_update()
		var collider = raycast.get_collider()
		if collider == null:
			return

		if collider.name.begins_with(\"Platform\"):
			if climbing_dir == -1:
				position.y -= 5
			velocity.y = 0
			is_climbing_ladder = false
			raycast.collide_with_areas = true


func handle_climb_platform():
	# handle ascending platform climbing
	var raycast = null
	if direction == 1:
		raycast = $RayCastRight
	else:
		raycast = $RayCastLeft
		
	raycast.force_raycast_update()
	var collider = raycast.get_collider()
	if collider != null and collider.name.begins_with(\"Platform\"):
		position.y -= 1
	return false
		
			
func handle_collision():
	# handle collision with non player bodies
	if get_slide_count() > 0:
		for i in range(get_slide_count()):
			if \"Elemental\" in get_slide_collision(i).collider.name:
				if is_climbing_ladder:
					climbing_dir = -1 * climbing_dir
				else:
					direction = -1 * direction
			
			if \"Barrel\" in get_slide_collision(i).collider.name :
				queue_free()
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 15, 10 )

[sub_resource type="Animation" id=3]
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ Vector2( 0, -9 ), Vector2( 0, -8 ) ]
}

[node name="FireElemental" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0, -8 )
texture = ExtResource( 1 )
vframes = 2
hframes = 2

[node name="CollisionShapePhysicEngine" type="CollisionShape2D" parent="."]
position = Vector2( 0, -1 )
scale = Vector2( 0.35, 0.1 )
shape = SubResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/moving = SubResource( 3 )

[node name="RayCastRight" type="RayCast2D" parent="."]
position = Vector2( 6, 0 )
scale = Vector2( 0.2, 0.1 )
cast_to = Vector2( 1, 0 )

[node name="RayCastLeft" type="RayCast2D" parent="."]
position = Vector2( -6, 0 )
scale = Vector2( 0.2, 0.1 )
cast_to = Vector2( -1, 0 )

[node name="RayCastUp" type="RayCast2D" parent="."]
position = Vector2( 0, -2 )
scale = Vector2( 0.2, 0.3 )
cast_to = Vector2( 0, -4 )
collide_with_areas = true

[node name="RayCastDown" type="RayCast2D" parent="."]
position = Vector2( 0, 1 )
scale = Vector2( 0.2, 0.3 )
cast_to = Vector2( 0, 4 )
collide_with_areas = true
collide_with_bodies = false
