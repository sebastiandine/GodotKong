[gd_scene load_steps=15 format=2]

[ext_resource path="res://Assets/jumpman.png" type="Texture" id=1]
[ext_resource path="res://Assets/hammer.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

onready var animation: AnimationPlayer = $AnimationPlayer

const SPEED: int = 60
const LADDER_SPEED: int = 20
const GRAVITY: int = 200
const JUMP_POWER: int = 70

# indicator, how the up direction is defined 
const UP_VECTOR: Vector2 = Vector2(0,-1) 

var velocity: Vector2 = Vector2()

var jump_mode: bool = false

var is_connected_to_ladder: bool = false
var has_reached_top_ladder: bool = false

var last_score_element: int = 0 

func _process(delta):
	
	# check if player is dead, and play dead animation as well as restart
	# the level in case of death
	if check_dead():
		get_parent().hide_all_game_objects()
		set_process(false)
		animation.play(\"dead\")
		yield(animation, \"animation_finished\")
		set_process(true)
		GlobalData.lives -= 1
		get_parent().get_tree().reload_current_scene()
	
	# velocity calculation according to various position status	
	velocity.x = 0
	if is_connected_to_ladder:
		velocity.y = 0
	else:
		velocity.y += GRAVITY * delta # make fall faster the longer the fall
	
	if jump_mode and is_on_floor():
		jump_mode = false
	
	check_key_input()
	handle_climb_platform()
	handle_climb_ladder()
	check_score()

	velocity = move_and_slide(velocity, UP_VECTOR)
	
	if is_connected_to_ladder:
		ladder_animation()
	else: 
		standard_animation()



func check_key_input() -> void:
	
	if not is_connected_to_ladder:
		if Input.is_action_pressed(\"left\") and position.x > 8:
			velocity.x = -1 * SPEED
		
		if Input.is_action_pressed(\"right\") and position.x < 216:
			velocity.x = 1 * SPEED
		
		if Input.is_action_just_pressed(\"jump\") and is_on_floor():
			velocity.y = -JUMP_POWER
			jump_mode = true
	else:
		if Input.is_action_pressed(\"jump\"):
			velocity.y = -1 * LADDER_SPEED
		if Input.is_action_pressed(\"down\"):
			velocity.y = 1 * LADDER_SPEED


func standard_animation() -> void:
	# standard running or standing animation, based on velocity
	
	if velocity.x > 0:
		$Sprite.flip_h = false
		animation.play(\"jump\") if jump_mode else animation.play(\"running\")
	elif velocity.x < 0:
		$Sprite.flip_h = true
		animation.play(\"jump\") if jump_mode else animation.play(\"running\")
	else:
		if not $Sprite.frame == 7:
			animation.play(\"jump\") if jump_mode else animation.play(\"idle\")


func ladder_animation() -> void:
	# ladder climbing animation
	
	if velocity.y == 0:
		animation.stop()
		
	if velocity.y != 0:

		# normal climbing
		if not has_reached_top_ladder:
			animation.play(\"climbing\")

		if has_reached_top_ladder and velocity.y < 0:
			self.set_process(false)
			animation.play(\"climbing_platform_edge_up\")
			yield(animation, \"animation_finished\")
			position.y -= 9
			$Sprite.frame = 7
			is_connected_to_ladder = false
			has_reached_top_ladder = false
			self.set_process(true)
		
		if has_reached_top_ladder and velocity.y > 0:
			self.set_process(false)
			animation.play_backwards(\"climbing_platform_edge_up\")
			yield(animation, \"animation_finished\")
			has_reached_top_ladder = false
			self.set_process(true)


func handle_climb_platform() -> void:
	# handle ascending platform climbing
	
	var raycast: RayCast2D = null
	if velocity.x > 0:
		raycast = $RayCastRight
	elif velocity.x < 0:
		raycast = $RayCastLeft
	else:
		return
	
	raycast.force_raycast_update()
	var collider: Object = raycast.get_collider()
	if collider != null and collider.name.begins_with(\"Platform\"):
		position.y -= 1



func handle_climb_ladder() -> void:
	# handle climbing up and down a ladder
	
	var raycast: RayCast2D = null

	if Input.is_action_pressed(\"jump\"):
		raycast = $RayCastUp
	elif Input.is_action_pressed(\"down\"):
		raycast = $RayCastDown
	else:
		return
	
	raycast.force_raycast_update()
	var collider: Object = raycast.get_collider()
	if collider == null:
		return

	# action, when already conntected to a ladder
	if is_connected_to_ladder:		
		
#		# stop climbing ladder (down) and go to ground
		if velocity.y > 0 and collider.name.begins_with(\"Platform\"):
			is_connected_to_ladder = false 
			raycast.collide_with_bodies = false
			return
		
		# fall if climbing down edge of broken ladder
		if velocity.y > 0 and collider.name.begins_with(\"LadderGap\"):
			is_connected_to_ladder = false 
			raycast.collide_with_bodies = false
			return
		
#		# stop climbing ladder (up) and go to next level platform
		if velocity.y < 0:
			while collider != null:
				# multiple raycast checks
				if collider.name.begins_with(\"Platform\"):
					has_reached_top_ladder = true
					$RayCastDown.collide_with_bodies = false
				if collider.name.begins_with(\"LadderGap\"):
					velocity.y = 0
					
				raycast.add_exception(collider)
				raycast.force_raycast_update()
				collider = raycast.get_collider()
			
			raycast.clear_exceptions()
			return

	# actions, when not conntected to a ladder	
	else:
		# check if Player can be connected to a ladder	
		if not is_on_floor():
			return
			
		if Input.is_action_pressed(\"jump\") and collider.name.begins_with(\"Ladder\"):
			is_connected_to_ladder = true
			$RayCastDown.collide_with_bodies = true
			return

		if Input.is_action_pressed(\"down\") and collider.name.begins_with(\"Ladder\"):
			position.y += 9
			$Sprite.frame = 6
			has_reached_top_ladder = true
			is_connected_to_ladder = true
			$RayCastDown.collide_with_bodies = true
			

func check_score() -> void:
	# check if the player hit a score and trigger depending instances
	
	$RayCastDownScore.force_raycast_update()
	var collider: Object = $RayCastDownScore.get_collider()
	if collider != null:
		if \"Barrel\" in collider.name and \\
		collider.get_instance_id() != last_score_element:
			get_parent().score(100, collider.position)
			last_score_element = collider.get_instance_id()
	else:
		last_score_element = 0


func check_dead() -> bool:
	# check if the player hit a fatal game object
	
	for body in $PlayerHitBox.get_overlapping_bodies():
		if \"FireElemental\" in body.name or \"Barrel\" in body.name:
			return true
	return false


"

[sub_resource type="Animation" id=2]
resource_name = "climbing"
length = 0.5
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:flip_h")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}

[sub_resource type="Animation" id=3]
resource_name = "climbing_platform_edge_up"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 5, 6 ]
}

[sub_resource type="Animation" id=4]
resource_name = "dead"
length = 1.6
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 8, 9 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0.0, 90.0, 180.0, 270.0, 360.0 ]
}

[sub_resource type="Animation" id=12]
resource_name = "hammer_standing_left"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 10, 11 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite_Hammer:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite_Hammer:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Sprite_Hammer:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ Vector2( -1, -23 ), Vector2( -16, -6 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Sprite_Hammer:rotation_degrees")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0.0, -90.0 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("HammerHitBox/CollisionShape2D:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -1, -21 ), Vector2( -15, -6 ) ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("HammerHitBox/CollisionShape2D:rotation_degrees")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 90.0 ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("Sprite:flip_h")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=10]
resource_name = "hammer_standing_right"
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 10, 11 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite_Hammer:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite_Hammer:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Sprite_Hammer:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ Vector2( -2, -23 ), Vector2( 14, -6 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Sprite_Hammer:rotation_degrees")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0.0, 90.0 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Sprite_Hammer:flip_h")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("HammerHitBox/CollisionShape2D:position")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -2, -21 ), Vector2( 13, -6 ) ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("HammerHitBox/CollisionShape2D:rotation_degrees")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 90.0 ]
}

[sub_resource type="Animation" id=5]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 0 ]
}

[sub_resource type="Animation" id=6]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 3, 0 ]
}

[sub_resource type="Animation" id=7]
length = 0.3
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.15 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 1, 2 ]
}

[sub_resource type="RectangleShape2D" id=8]

[sub_resource type="RectangleShape2D" id=11]

[sub_resource type="RectangleShape2D" id=9]

[node name="Player" type="KinematicBody2D"]
pause_mode = 2
collision_layer = 4
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -1, -8 )
texture = ExtResource( 1 )
vframes = 3
hframes = 6
frame = 4

[node name="Sprite_Hammer" type="Sprite" parent="."]
position = Vector2( -16, -6 )
rotation = -1.5708
texture = ExtResource( 2 )
hframes = 4
frame = 1

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/climbing = SubResource( 2 )
anims/climbing_platform_edge_up = SubResource( 3 )
anims/dead = SubResource( 4 )
anims/hammer_standing_left = SubResource( 12 )
anims/hammer_standing_right = SubResource( 10 )
anims/idle = SubResource( 5 )
anims/jump = SubResource( 6 )
anims/running = SubResource( 7 )

[node name="PlayerHitBox" type="Area2D" parent="."]
collision_layer = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerHitBox"]
position = Vector2( 0, -8 )
scale = Vector2( 0.55, 0.8 )
shape = SubResource( 8 )

[node name="HammerHitBox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="HammerHitBox"]
position = Vector2( -15, -6 )
rotation = 1.5708
scale = Vector2( 0.45, 0.5 )
shape = SubResource( 11 )

[node name="CollisionShapePhysicEngine" type="CollisionShape2D" parent="."]
position = Vector2( 0, -0.5 )
scale = Vector2( 0.5, 0.05 )
shape = SubResource( 9 )

[node name="RayCastRight" type="RayCast2D" parent="."]
position = Vector2( 5, 0 )
scale = Vector2( 0.2, 0.1 )
cast_to = Vector2( 1, 0 )

[node name="RayCastLeft" type="RayCast2D" parent="."]
position = Vector2( -5, 0 )
scale = Vector2( 0.2, 0.1 )
cast_to = Vector2( -1, 0 )

[node name="RayCastDown" type="RayCast2D" parent="."]
position = Vector2( 0, 1 )
scale = Vector2( 0.2, 0.2 )
cast_to = Vector2( 0, 10 )
collide_with_areas = true
collide_with_bodies = false

[node name="RayCastDownScore" type="RayCast2D" parent="."]
position = Vector2( 0, 5.96046e-08 )
scale = Vector2( 0.2, 0.2 )
cast_to = Vector2( 0, 20 )

[node name="RayCastUp" type="RayCast2D" parent="."]
scale = Vector2( 0.2, 0.2 )
cast_to = Vector2( 0, -35 )
collide_with_areas = true
